// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MainschedulelstBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView child;

  @NonNull
  public final TextView childTxt;

  @NonNull
  public final TextView jobordername;

  @NonNull
  public final TextView jobordernumTxt;

  @NonNull
  public final TextView jobordreqtn;

  @NonNull
  public final TextView jobordreqtnTxt;

  @NonNull
  public final TextView loadingqtn;

  @NonNull
  public final TextView loadingqtnTxt;

  @NonNull
  public final CardView mainimportcard;

  @NonNull
  public final TextView nextoper;

  @NonNull
  public final TextView nextoperTxt;

  @NonNull
  public final TextView sequenceNum;

  @NonNull
  public final TextView sequenceTxt;

  private MainschedulelstBinding(@NonNull CardView rootView, @NonNull TextView child,
      @NonNull TextView childTxt, @NonNull TextView jobordername, @NonNull TextView jobordernumTxt,
      @NonNull TextView jobordreqtn, @NonNull TextView jobordreqtnTxt, @NonNull TextView loadingqtn,
      @NonNull TextView loadingqtnTxt, @NonNull CardView mainimportcard, @NonNull TextView nextoper,
      @NonNull TextView nextoperTxt, @NonNull TextView sequenceNum, @NonNull TextView sequenceTxt) {
    this.rootView = rootView;
    this.child = child;
    this.childTxt = childTxt;
    this.jobordername = jobordername;
    this.jobordernumTxt = jobordernumTxt;
    this.jobordreqtn = jobordreqtn;
    this.jobordreqtnTxt = jobordreqtnTxt;
    this.loadingqtn = loadingqtn;
    this.loadingqtnTxt = loadingqtnTxt;
    this.mainimportcard = mainimportcard;
    this.nextoper = nextoper;
    this.nextoperTxt = nextoperTxt;
    this.sequenceNum = sequenceNum;
    this.sequenceTxt = sequenceTxt;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static MainschedulelstBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MainschedulelstBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.mainschedulelst, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MainschedulelstBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.child;
      TextView child = ViewBindings.findChildViewById(rootView, id);
      if (child == null) {
        break missingId;
      }

      id = R.id.child_txt;
      TextView childTxt = ViewBindings.findChildViewById(rootView, id);
      if (childTxt == null) {
        break missingId;
      }

      id = R.id.jobordername;
      TextView jobordername = ViewBindings.findChildViewById(rootView, id);
      if (jobordername == null) {
        break missingId;
      }

      id = R.id.jobordernum_txt;
      TextView jobordernumTxt = ViewBindings.findChildViewById(rootView, id);
      if (jobordernumTxt == null) {
        break missingId;
      }

      id = R.id.jobordreqtn;
      TextView jobordreqtn = ViewBindings.findChildViewById(rootView, id);
      if (jobordreqtn == null) {
        break missingId;
      }

      id = R.id.jobordreqtn_txt;
      TextView jobordreqtnTxt = ViewBindings.findChildViewById(rootView, id);
      if (jobordreqtnTxt == null) {
        break missingId;
      }

      id = R.id.loadingqtn;
      TextView loadingqtn = ViewBindings.findChildViewById(rootView, id);
      if (loadingqtn == null) {
        break missingId;
      }

      id = R.id.loadingqtn_txt;
      TextView loadingqtnTxt = ViewBindings.findChildViewById(rootView, id);
      if (loadingqtnTxt == null) {
        break missingId;
      }

      CardView mainimportcard = (CardView) rootView;

      id = R.id.nextoper;
      TextView nextoper = ViewBindings.findChildViewById(rootView, id);
      if (nextoper == null) {
        break missingId;
      }

      id = R.id.nextoper_txt;
      TextView nextoperTxt = ViewBindings.findChildViewById(rootView, id);
      if (nextoperTxt == null) {
        break missingId;
      }

      id = R.id.sequence_num;
      TextView sequenceNum = ViewBindings.findChildViewById(rootView, id);
      if (sequenceNum == null) {
        break missingId;
      }

      id = R.id.sequence_txt;
      TextView sequenceTxt = ViewBindings.findChildViewById(rootView, id);
      if (sequenceTxt == null) {
        break missingId;
      }

      return new MainschedulelstBinding((CardView) rootView, child, childTxt, jobordername,
          jobordernumTxt, jobordreqtn, jobordreqtnTxt, loadingqtn, loadingqtnTxt, mainimportcard,
          nextoper, nextoperTxt, sequenceNum, sequenceTxt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
