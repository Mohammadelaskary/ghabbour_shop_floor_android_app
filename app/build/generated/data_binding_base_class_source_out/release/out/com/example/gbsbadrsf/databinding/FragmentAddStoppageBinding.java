// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.ContentLoadingProgressBar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAddStoppageBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialButton addStoppage;

  @NonNull
  public final TextInputLayout die;

  @NonNull
  public final MaterialButton dieClear;

  @NonNull
  public final ContentLoadingProgressBar dieLoading;

  @NonNull
  public final AutoCompleteTextView dieSpinner;

  @NonNull
  public final TextInputLayout factory;

  @NonNull
  public final ContentLoadingProgressBar factoryLoading;

  @NonNull
  public final AutoCompleteTextView factorySpinner;

  @NonNull
  public final TextInputLayout jig;

  @NonNull
  public final MaterialButton jigClear;

  @NonNull
  public final ContentLoadingProgressBar jigLoading;

  @NonNull
  public final AutoCompleteTextView jigSpinner;

  @NonNull
  public final TextInputLayout line;

  @NonNull
  public final MaterialButton lineClear;

  @NonNull
  public final ContentLoadingProgressBar lineLoading;

  @NonNull
  public final AutoCompleteTextView lineSpinner;

  @NonNull
  public final TextInputLayout machine;

  @NonNull
  public final MaterialButton machineClear;

  @NonNull
  public final TextInputLayout machineFamily;

  @NonNull
  public final MaterialButton machineFamilyClear;

  @NonNull
  public final ContentLoadingProgressBar machineFamilyLoading;

  @NonNull
  public final AutoCompleteTextView machineFamilySpinner;

  @NonNull
  public final ContentLoadingProgressBar machineLoading;

  @NonNull
  public final RadioButton machineOption;

  @NonNull
  public final RadioGroup machineOrStation;

  @NonNull
  public final AutoCompleteTextView machineSpinner;

  @NonNull
  public final TextInputLayout station;

  @NonNull
  public final MaterialButton stationClear;

  @NonNull
  public final ContentLoadingProgressBar stationLoading;

  @NonNull
  public final RadioButton stationOption;

  @NonNull
  public final AutoCompleteTextView stationSpinner;

  @NonNull
  public final TextInputLayout stoppageName;

  @NonNull
  public final ContentLoadingProgressBar stoppageNameLoading;

  @NonNull
  public final AutoCompleteTextView stoppageNameSpinner;

  @NonNull
  public final TextInputLayout stoppageStartDate;

  @NonNull
  public final TextInputEditText stoppageStartDateEdit;

  @NonNull
  public final TextInputLayout stoppageStartTime;

  @NonNull
  public final TextInputEditText stoppageStartTimeEdit;

  @NonNull
  public final ContentLoadingProgressBar stoppageStartTimeLoading;

  @NonNull
  public final TextInputLayout subLine;

  @NonNull
  public final MaterialButton subLineClear;

  @NonNull
  public final ContentLoadingProgressBar subLineLoading;

  @NonNull
  public final AutoCompleteTextView sublineSpinner;

  @NonNull
  public final TextInputLayout workCenter;

  @NonNull
  public final MaterialButton workCenterClear;

  @NonNull
  public final ContentLoadingProgressBar workCenterLoading;

  @NonNull
  public final AutoCompleteTextView workCenterSpinner;

  private FragmentAddStoppageBinding(@NonNull ScrollView rootView,
      @NonNull MaterialButton addStoppage, @NonNull TextInputLayout die,
      @NonNull MaterialButton dieClear, @NonNull ContentLoadingProgressBar dieLoading,
      @NonNull AutoCompleteTextView dieSpinner, @NonNull TextInputLayout factory,
      @NonNull ContentLoadingProgressBar factoryLoading,
      @NonNull AutoCompleteTextView factorySpinner, @NonNull TextInputLayout jig,
      @NonNull MaterialButton jigClear, @NonNull ContentLoadingProgressBar jigLoading,
      @NonNull AutoCompleteTextView jigSpinner, @NonNull TextInputLayout line,
      @NonNull MaterialButton lineClear, @NonNull ContentLoadingProgressBar lineLoading,
      @NonNull AutoCompleteTextView lineSpinner, @NonNull TextInputLayout machine,
      @NonNull MaterialButton machineClear, @NonNull TextInputLayout machineFamily,
      @NonNull MaterialButton machineFamilyClear,
      @NonNull ContentLoadingProgressBar machineFamilyLoading,
      @NonNull AutoCompleteTextView machineFamilySpinner,
      @NonNull ContentLoadingProgressBar machineLoading, @NonNull RadioButton machineOption,
      @NonNull RadioGroup machineOrStation, @NonNull AutoCompleteTextView machineSpinner,
      @NonNull TextInputLayout station, @NonNull MaterialButton stationClear,
      @NonNull ContentLoadingProgressBar stationLoading, @NonNull RadioButton stationOption,
      @NonNull AutoCompleteTextView stationSpinner, @NonNull TextInputLayout stoppageName,
      @NonNull ContentLoadingProgressBar stoppageNameLoading,
      @NonNull AutoCompleteTextView stoppageNameSpinner, @NonNull TextInputLayout stoppageStartDate,
      @NonNull TextInputEditText stoppageStartDateEdit, @NonNull TextInputLayout stoppageStartTime,
      @NonNull TextInputEditText stoppageStartTimeEdit,
      @NonNull ContentLoadingProgressBar stoppageStartTimeLoading, @NonNull TextInputLayout subLine,
      @NonNull MaterialButton subLineClear, @NonNull ContentLoadingProgressBar subLineLoading,
      @NonNull AutoCompleteTextView sublineSpinner, @NonNull TextInputLayout workCenter,
      @NonNull MaterialButton workCenterClear, @NonNull ContentLoadingProgressBar workCenterLoading,
      @NonNull AutoCompleteTextView workCenterSpinner) {
    this.rootView = rootView;
    this.addStoppage = addStoppage;
    this.die = die;
    this.dieClear = dieClear;
    this.dieLoading = dieLoading;
    this.dieSpinner = dieSpinner;
    this.factory = factory;
    this.factoryLoading = factoryLoading;
    this.factorySpinner = factorySpinner;
    this.jig = jig;
    this.jigClear = jigClear;
    this.jigLoading = jigLoading;
    this.jigSpinner = jigSpinner;
    this.line = line;
    this.lineClear = lineClear;
    this.lineLoading = lineLoading;
    this.lineSpinner = lineSpinner;
    this.machine = machine;
    this.machineClear = machineClear;
    this.machineFamily = machineFamily;
    this.machineFamilyClear = machineFamilyClear;
    this.machineFamilyLoading = machineFamilyLoading;
    this.machineFamilySpinner = machineFamilySpinner;
    this.machineLoading = machineLoading;
    this.machineOption = machineOption;
    this.machineOrStation = machineOrStation;
    this.machineSpinner = machineSpinner;
    this.station = station;
    this.stationClear = stationClear;
    this.stationLoading = stationLoading;
    this.stationOption = stationOption;
    this.stationSpinner = stationSpinner;
    this.stoppageName = stoppageName;
    this.stoppageNameLoading = stoppageNameLoading;
    this.stoppageNameSpinner = stoppageNameSpinner;
    this.stoppageStartDate = stoppageStartDate;
    this.stoppageStartDateEdit = stoppageStartDateEdit;
    this.stoppageStartTime = stoppageStartTime;
    this.stoppageStartTimeEdit = stoppageStartTimeEdit;
    this.stoppageStartTimeLoading = stoppageStartTimeLoading;
    this.subLine = subLine;
    this.subLineClear = subLineClear;
    this.subLineLoading = subLineLoading;
    this.sublineSpinner = sublineSpinner;
    this.workCenter = workCenter;
    this.workCenterClear = workCenterClear;
    this.workCenterLoading = workCenterLoading;
    this.workCenterSpinner = workCenterSpinner;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAddStoppageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAddStoppageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_add_stoppage, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAddStoppageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_stoppage;
      MaterialButton addStoppage = ViewBindings.findChildViewById(rootView, id);
      if (addStoppage == null) {
        break missingId;
      }

      id = R.id.die;
      TextInputLayout die = ViewBindings.findChildViewById(rootView, id);
      if (die == null) {
        break missingId;
      }

      id = R.id.die_clear;
      MaterialButton dieClear = ViewBindings.findChildViewById(rootView, id);
      if (dieClear == null) {
        break missingId;
      }

      id = R.id.die_loading;
      ContentLoadingProgressBar dieLoading = ViewBindings.findChildViewById(rootView, id);
      if (dieLoading == null) {
        break missingId;
      }

      id = R.id.die_spinner;
      AutoCompleteTextView dieSpinner = ViewBindings.findChildViewById(rootView, id);
      if (dieSpinner == null) {
        break missingId;
      }

      id = R.id.factory;
      TextInputLayout factory = ViewBindings.findChildViewById(rootView, id);
      if (factory == null) {
        break missingId;
      }

      id = R.id.factory_loading;
      ContentLoadingProgressBar factoryLoading = ViewBindings.findChildViewById(rootView, id);
      if (factoryLoading == null) {
        break missingId;
      }

      id = R.id.factory_spinner;
      AutoCompleteTextView factorySpinner = ViewBindings.findChildViewById(rootView, id);
      if (factorySpinner == null) {
        break missingId;
      }

      id = R.id.jig;
      TextInputLayout jig = ViewBindings.findChildViewById(rootView, id);
      if (jig == null) {
        break missingId;
      }

      id = R.id.jig_clear;
      MaterialButton jigClear = ViewBindings.findChildViewById(rootView, id);
      if (jigClear == null) {
        break missingId;
      }

      id = R.id.jig_loading;
      ContentLoadingProgressBar jigLoading = ViewBindings.findChildViewById(rootView, id);
      if (jigLoading == null) {
        break missingId;
      }

      id = R.id.jig_spinner;
      AutoCompleteTextView jigSpinner = ViewBindings.findChildViewById(rootView, id);
      if (jigSpinner == null) {
        break missingId;
      }

      id = R.id.line;
      TextInputLayout line = ViewBindings.findChildViewById(rootView, id);
      if (line == null) {
        break missingId;
      }

      id = R.id.line_clear;
      MaterialButton lineClear = ViewBindings.findChildViewById(rootView, id);
      if (lineClear == null) {
        break missingId;
      }

      id = R.id.line_loading;
      ContentLoadingProgressBar lineLoading = ViewBindings.findChildViewById(rootView, id);
      if (lineLoading == null) {
        break missingId;
      }

      id = R.id.line_spinner;
      AutoCompleteTextView lineSpinner = ViewBindings.findChildViewById(rootView, id);
      if (lineSpinner == null) {
        break missingId;
      }

      id = R.id.machine;
      TextInputLayout machine = ViewBindings.findChildViewById(rootView, id);
      if (machine == null) {
        break missingId;
      }

      id = R.id.machine_clear;
      MaterialButton machineClear = ViewBindings.findChildViewById(rootView, id);
      if (machineClear == null) {
        break missingId;
      }

      id = R.id.machine_family;
      TextInputLayout machineFamily = ViewBindings.findChildViewById(rootView, id);
      if (machineFamily == null) {
        break missingId;
      }

      id = R.id.machine_family_clear;
      MaterialButton machineFamilyClear = ViewBindings.findChildViewById(rootView, id);
      if (machineFamilyClear == null) {
        break missingId;
      }

      id = R.id.machine_family_loading;
      ContentLoadingProgressBar machineFamilyLoading = ViewBindings.findChildViewById(rootView, id);
      if (machineFamilyLoading == null) {
        break missingId;
      }

      id = R.id.machine_family_spinner;
      AutoCompleteTextView machineFamilySpinner = ViewBindings.findChildViewById(rootView, id);
      if (machineFamilySpinner == null) {
        break missingId;
      }

      id = R.id.machine_loading;
      ContentLoadingProgressBar machineLoading = ViewBindings.findChildViewById(rootView, id);
      if (machineLoading == null) {
        break missingId;
      }

      id = R.id.machine_option;
      RadioButton machineOption = ViewBindings.findChildViewById(rootView, id);
      if (machineOption == null) {
        break missingId;
      }

      id = R.id.machine_or_station;
      RadioGroup machineOrStation = ViewBindings.findChildViewById(rootView, id);
      if (machineOrStation == null) {
        break missingId;
      }

      id = R.id.machine_spinner;
      AutoCompleteTextView machineSpinner = ViewBindings.findChildViewById(rootView, id);
      if (machineSpinner == null) {
        break missingId;
      }

      id = R.id.station;
      TextInputLayout station = ViewBindings.findChildViewById(rootView, id);
      if (station == null) {
        break missingId;
      }

      id = R.id.station_clear;
      MaterialButton stationClear = ViewBindings.findChildViewById(rootView, id);
      if (stationClear == null) {
        break missingId;
      }

      id = R.id.station_loading;
      ContentLoadingProgressBar stationLoading = ViewBindings.findChildViewById(rootView, id);
      if (stationLoading == null) {
        break missingId;
      }

      id = R.id.station_option;
      RadioButton stationOption = ViewBindings.findChildViewById(rootView, id);
      if (stationOption == null) {
        break missingId;
      }

      id = R.id.station_spinner;
      AutoCompleteTextView stationSpinner = ViewBindings.findChildViewById(rootView, id);
      if (stationSpinner == null) {
        break missingId;
      }

      id = R.id.stoppage_name;
      TextInputLayout stoppageName = ViewBindings.findChildViewById(rootView, id);
      if (stoppageName == null) {
        break missingId;
      }

      id = R.id.stoppage_name_loading;
      ContentLoadingProgressBar stoppageNameLoading = ViewBindings.findChildViewById(rootView, id);
      if (stoppageNameLoading == null) {
        break missingId;
      }

      id = R.id.stoppage_name_spinner;
      AutoCompleteTextView stoppageNameSpinner = ViewBindings.findChildViewById(rootView, id);
      if (stoppageNameSpinner == null) {
        break missingId;
      }

      id = R.id.stoppage_start_date;
      TextInputLayout stoppageStartDate = ViewBindings.findChildViewById(rootView, id);
      if (stoppageStartDate == null) {
        break missingId;
      }

      id = R.id.stoppage_start_date_edit;
      TextInputEditText stoppageStartDateEdit = ViewBindings.findChildViewById(rootView, id);
      if (stoppageStartDateEdit == null) {
        break missingId;
      }

      id = R.id.stoppage_start_time;
      TextInputLayout stoppageStartTime = ViewBindings.findChildViewById(rootView, id);
      if (stoppageStartTime == null) {
        break missingId;
      }

      id = R.id.stoppage_start_time_edit;
      TextInputEditText stoppageStartTimeEdit = ViewBindings.findChildViewById(rootView, id);
      if (stoppageStartTimeEdit == null) {
        break missingId;
      }

      id = R.id.stoppage_start_time_loading;
      ContentLoadingProgressBar stoppageStartTimeLoading = ViewBindings.findChildViewById(rootView, id);
      if (stoppageStartTimeLoading == null) {
        break missingId;
      }

      id = R.id.sub_line;
      TextInputLayout subLine = ViewBindings.findChildViewById(rootView, id);
      if (subLine == null) {
        break missingId;
      }

      id = R.id.sub_line_clear;
      MaterialButton subLineClear = ViewBindings.findChildViewById(rootView, id);
      if (subLineClear == null) {
        break missingId;
      }

      id = R.id.sub_line_loading;
      ContentLoadingProgressBar subLineLoading = ViewBindings.findChildViewById(rootView, id);
      if (subLineLoading == null) {
        break missingId;
      }

      id = R.id.subline_spinner;
      AutoCompleteTextView sublineSpinner = ViewBindings.findChildViewById(rootView, id);
      if (sublineSpinner == null) {
        break missingId;
      }

      id = R.id.work_center;
      TextInputLayout workCenter = ViewBindings.findChildViewById(rootView, id);
      if (workCenter == null) {
        break missingId;
      }

      id = R.id.work_center_clear;
      MaterialButton workCenterClear = ViewBindings.findChildViewById(rootView, id);
      if (workCenterClear == null) {
        break missingId;
      }

      id = R.id.work_center_loading;
      ContentLoadingProgressBar workCenterLoading = ViewBindings.findChildViewById(rootView, id);
      if (workCenterLoading == null) {
        break missingId;
      }

      id = R.id.work_center_spinner;
      AutoCompleteTextView workCenterSpinner = ViewBindings.findChildViewById(rootView, id);
      if (workCenterSpinner == null) {
        break missingId;
      }

      return new FragmentAddStoppageBinding((ScrollView) rootView, addStoppage, die, dieClear,
          dieLoading, dieSpinner, factory, factoryLoading, factorySpinner, jig, jigClear,
          jigLoading, jigSpinner, line, lineClear, lineLoading, lineSpinner, machine, machineClear,
          machineFamily, machineFamilyClear, machineFamilyLoading, machineFamilySpinner,
          machineLoading, machineOption, machineOrStation, machineSpinner, station, stationClear,
          stationLoading, stationOption, stationSpinner, stoppageName, stoppageNameLoading,
          stoppageNameSpinner, stoppageStartDate, stoppageStartDateEdit, stoppageStartTime,
          stoppageStartTimeEdit, stoppageStartTimeLoading, subLine, subLineClear, subLineLoading,
          sublineSpinner, workCenter, workCenterClear, workCenterLoading, workCenterSpinner);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
