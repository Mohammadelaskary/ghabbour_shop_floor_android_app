// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPaintRejectionRequestBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final ConstraintLayout dataLayout;

  @NonNull
  public final DefectsListBottomSheetBinding defectsListBottomSheet;

  @NonNull
  public final View disableColor;

  @NonNull
  public final JobOrderDataBinding jobOrderData;

  @NonNull
  public final LoadingQtyDataBinding loadingQtyData;

  @NonNull
  public final TextInputLayout newBasketCode;

  @NonNull
  public final TextInputLayout oldBasketCode;

  @NonNull
  public final TextView operation;

  @NonNull
  public final TextView parentDesc;

  @NonNull
  public final TextView productionscrapTxt;

  @NonNull
  public final TextInputLayout reason;

  @NonNull
  public final MaterialButton reasonDefBtn;

  @NonNull
  public final AutoCompleteTextView reasonSpinner;

  @NonNull
  public final TextInputLayout rejectedQtyEdt;

  @NonNull
  public final TextInputLayout responsibleDepSpin;

  @NonNull
  public final AutoCompleteTextView responsibleSpinner;

  @NonNull
  public final MaterialButton saveBtn;

  private FragmentPaintRejectionRequestBinding(@NonNull CoordinatorLayout rootView,
      @NonNull ConstraintLayout dataLayout,
      @NonNull DefectsListBottomSheetBinding defectsListBottomSheet, @NonNull View disableColor,
      @NonNull JobOrderDataBinding jobOrderData, @NonNull LoadingQtyDataBinding loadingQtyData,
      @NonNull TextInputLayout newBasketCode, @NonNull TextInputLayout oldBasketCode,
      @NonNull TextView operation, @NonNull TextView parentDesc,
      @NonNull TextView productionscrapTxt, @NonNull TextInputLayout reason,
      @NonNull MaterialButton reasonDefBtn, @NonNull AutoCompleteTextView reasonSpinner,
      @NonNull TextInputLayout rejectedQtyEdt, @NonNull TextInputLayout responsibleDepSpin,
      @NonNull AutoCompleteTextView responsibleSpinner, @NonNull MaterialButton saveBtn) {
    this.rootView = rootView;
    this.dataLayout = dataLayout;
    this.defectsListBottomSheet = defectsListBottomSheet;
    this.disableColor = disableColor;
    this.jobOrderData = jobOrderData;
    this.loadingQtyData = loadingQtyData;
    this.newBasketCode = newBasketCode;
    this.oldBasketCode = oldBasketCode;
    this.operation = operation;
    this.parentDesc = parentDesc;
    this.productionscrapTxt = productionscrapTxt;
    this.reason = reason;
    this.reasonDefBtn = reasonDefBtn;
    this.reasonSpinner = reasonSpinner;
    this.rejectedQtyEdt = rejectedQtyEdt;
    this.responsibleDepSpin = responsibleDepSpin;
    this.responsibleSpinner = responsibleSpinner;
    this.saveBtn = saveBtn;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPaintRejectionRequestBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPaintRejectionRequestBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_paint_rejection_request, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPaintRejectionRequestBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.data_layout;
      ConstraintLayout dataLayout = ViewBindings.findChildViewById(rootView, id);
      if (dataLayout == null) {
        break missingId;
      }

      id = R.id.defects_list_bottom_sheet;
      View defectsListBottomSheet = ViewBindings.findChildViewById(rootView, id);
      if (defectsListBottomSheet == null) {
        break missingId;
      }
      DefectsListBottomSheetBinding binding_defectsListBottomSheet = DefectsListBottomSheetBinding.bind(defectsListBottomSheet);

      id = R.id.disable_color;
      View disableColor = ViewBindings.findChildViewById(rootView, id);
      if (disableColor == null) {
        break missingId;
      }

      id = R.id.job_order_data;
      View jobOrderData = ViewBindings.findChildViewById(rootView, id);
      if (jobOrderData == null) {
        break missingId;
      }
      JobOrderDataBinding binding_jobOrderData = JobOrderDataBinding.bind(jobOrderData);

      id = R.id.loading_qty_data;
      View loadingQtyData = ViewBindings.findChildViewById(rootView, id);
      if (loadingQtyData == null) {
        break missingId;
      }
      LoadingQtyDataBinding binding_loadingQtyData = LoadingQtyDataBinding.bind(loadingQtyData);

      id = R.id.new_basket_code;
      TextInputLayout newBasketCode = ViewBindings.findChildViewById(rootView, id);
      if (newBasketCode == null) {
        break missingId;
      }

      id = R.id.old_basket_code;
      TextInputLayout oldBasketCode = ViewBindings.findChildViewById(rootView, id);
      if (oldBasketCode == null) {
        break missingId;
      }

      id = R.id.operation;
      TextView operation = ViewBindings.findChildViewById(rootView, id);
      if (operation == null) {
        break missingId;
      }

      id = R.id.parent_desc;
      TextView parentDesc = ViewBindings.findChildViewById(rootView, id);
      if (parentDesc == null) {
        break missingId;
      }

      id = R.id.productionscrap_txt;
      TextView productionscrapTxt = ViewBindings.findChildViewById(rootView, id);
      if (productionscrapTxt == null) {
        break missingId;
      }

      id = R.id.reason;
      TextInputLayout reason = ViewBindings.findChildViewById(rootView, id);
      if (reason == null) {
        break missingId;
      }

      id = R.id.reason_def_btn;
      MaterialButton reasonDefBtn = ViewBindings.findChildViewById(rootView, id);
      if (reasonDefBtn == null) {
        break missingId;
      }

      id = R.id.reason_spinner;
      AutoCompleteTextView reasonSpinner = ViewBindings.findChildViewById(rootView, id);
      if (reasonSpinner == null) {
        break missingId;
      }

      id = R.id.rejected_qty_edt;
      TextInputLayout rejectedQtyEdt = ViewBindings.findChildViewById(rootView, id);
      if (rejectedQtyEdt == null) {
        break missingId;
      }

      id = R.id.responsible_dep_spin;
      TextInputLayout responsibleDepSpin = ViewBindings.findChildViewById(rootView, id);
      if (responsibleDepSpin == null) {
        break missingId;
      }

      id = R.id.responsible_spinner;
      AutoCompleteTextView responsibleSpinner = ViewBindings.findChildViewById(rootView, id);
      if (responsibleSpinner == null) {
        break missingId;
      }

      id = R.id.save_btn;
      MaterialButton saveBtn = ViewBindings.findChildViewById(rootView, id);
      if (saveBtn == null) {
        break missingId;
      }

      return new FragmentPaintRejectionRequestBinding((CoordinatorLayout) rootView, dataLayout,
          binding_defectsListBottomSheet, disableColor, binding_jobOrderData,
          binding_loadingQtyData, newBasketCode, oldBasketCode, operation, parentDesc,
          productionscrapTxt, reason, reasonDefBtn, reasonSpinner, rejectedQtyEdt,
          responsibleDepSpin, responsibleSpinner, saveBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
