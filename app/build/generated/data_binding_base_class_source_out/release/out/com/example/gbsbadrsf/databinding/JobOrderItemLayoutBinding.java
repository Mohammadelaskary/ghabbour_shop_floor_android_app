// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class JobOrderItemLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView cardView;

  @NonNull
  public final MaterialButton expandArrow;

  @NonNull
  public final TextView jobOrderName;

  @NonNull
  public final TextView jobOrderQty;

  @NonNull
  public final TextView parentDesc;

  @NonNull
  public final RecyclerView pprList;

  private JobOrderItemLayoutBinding(@NonNull ConstraintLayout rootView, @NonNull CardView cardView,
      @NonNull MaterialButton expandArrow, @NonNull TextView jobOrderName,
      @NonNull TextView jobOrderQty, @NonNull TextView parentDesc, @NonNull RecyclerView pprList) {
    this.rootView = rootView;
    this.cardView = cardView;
    this.expandArrow = expandArrow;
    this.jobOrderName = jobOrderName;
    this.jobOrderQty = jobOrderQty;
    this.parentDesc = parentDesc;
    this.pprList = pprList;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static JobOrderItemLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static JobOrderItemLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.job_order_item_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static JobOrderItemLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardView;
      CardView cardView = ViewBindings.findChildViewById(rootView, id);
      if (cardView == null) {
        break missingId;
      }

      id = R.id.expand_arrow;
      MaterialButton expandArrow = ViewBindings.findChildViewById(rootView, id);
      if (expandArrow == null) {
        break missingId;
      }

      id = R.id.job_order_name;
      TextView jobOrderName = ViewBindings.findChildViewById(rootView, id);
      if (jobOrderName == null) {
        break missingId;
      }

      id = R.id.job_order_qty;
      TextView jobOrderQty = ViewBindings.findChildViewById(rootView, id);
      if (jobOrderQty == null) {
        break missingId;
      }

      id = R.id.parent_desc;
      TextView parentDesc = ViewBindings.findChildViewById(rootView, id);
      if (parentDesc == null) {
        break missingId;
      }

      id = R.id.ppr_list;
      RecyclerView pprList = ViewBindings.findChildViewById(rootView, id);
      if (pprList == null) {
        break missingId;
      }

      return new JobOrderItemLayoutBinding((ConstraintLayout) rootView, cardView, expandArrow,
          jobOrderName, jobOrderQty, parentDesc, pprList);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
