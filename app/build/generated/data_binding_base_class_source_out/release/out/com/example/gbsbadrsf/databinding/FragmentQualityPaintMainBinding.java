// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentQualityPaintMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton declineRejectionRequest;

  @NonNull
  public final TextView paintQualityTxt;

  @NonNull
  public final MaterialButton qualityDecisionBtn;

  @NonNull
  public final MaterialButton qualityOperationBtn;

  @NonNull
  public final MaterialButton qualityRepairBtn;

  @NonNull
  public final MaterialButton randomQualityInspection;

  @NonNull
  public final MaterialButton rejectionRequestBtn;

  @NonNull
  public final MaterialButton rejectionRequestsListBtn;

  private FragmentQualityPaintMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton declineRejectionRequest, @NonNull TextView paintQualityTxt,
      @NonNull MaterialButton qualityDecisionBtn, @NonNull MaterialButton qualityOperationBtn,
      @NonNull MaterialButton qualityRepairBtn, @NonNull MaterialButton randomQualityInspection,
      @NonNull MaterialButton rejectionRequestBtn,
      @NonNull MaterialButton rejectionRequestsListBtn) {
    this.rootView = rootView;
    this.declineRejectionRequest = declineRejectionRequest;
    this.paintQualityTxt = paintQualityTxt;
    this.qualityDecisionBtn = qualityDecisionBtn;
    this.qualityOperationBtn = qualityOperationBtn;
    this.qualityRepairBtn = qualityRepairBtn;
    this.randomQualityInspection = randomQualityInspection;
    this.rejectionRequestBtn = rejectionRequestBtn;
    this.rejectionRequestsListBtn = rejectionRequestsListBtn;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentQualityPaintMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentQualityPaintMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_quality_paint_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentQualityPaintMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.decline_rejection_request;
      MaterialButton declineRejectionRequest = ViewBindings.findChildViewById(rootView, id);
      if (declineRejectionRequest == null) {
        break missingId;
      }

      id = R.id.paint_quality_txt;
      TextView paintQualityTxt = ViewBindings.findChildViewById(rootView, id);
      if (paintQualityTxt == null) {
        break missingId;
      }

      id = R.id.quality_decision_btn;
      MaterialButton qualityDecisionBtn = ViewBindings.findChildViewById(rootView, id);
      if (qualityDecisionBtn == null) {
        break missingId;
      }

      id = R.id.quality_operation_btn;
      MaterialButton qualityOperationBtn = ViewBindings.findChildViewById(rootView, id);
      if (qualityOperationBtn == null) {
        break missingId;
      }

      id = R.id.quality_repair_btn;
      MaterialButton qualityRepairBtn = ViewBindings.findChildViewById(rootView, id);
      if (qualityRepairBtn == null) {
        break missingId;
      }

      id = R.id.random_quality_inspection;
      MaterialButton randomQualityInspection = ViewBindings.findChildViewById(rootView, id);
      if (randomQualityInspection == null) {
        break missingId;
      }

      id = R.id.rejection_request_btn;
      MaterialButton rejectionRequestBtn = ViewBindings.findChildViewById(rootView, id);
      if (rejectionRequestBtn == null) {
        break missingId;
      }

      id = R.id.rejection_requests_list_btn;
      MaterialButton rejectionRequestsListBtn = ViewBindings.findChildViewById(rootView, id);
      if (rejectionRequestsListBtn == null) {
        break missingId;
      }

      return new FragmentQualityPaintMainBinding((ConstraintLayout) rootView,
          declineRejectionRequest, paintQualityTxt, qualityDecisionBtn, qualityOperationBtn,
          qualityRepairBtn, randomQualityInspection, rejectionRequestBtn, rejectionRequestsListBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
