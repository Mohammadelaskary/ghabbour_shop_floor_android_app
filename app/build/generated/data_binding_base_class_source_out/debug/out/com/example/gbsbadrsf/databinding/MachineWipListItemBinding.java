// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MachineWipListItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView childParentDesc;

  @NonNull
  public final TextView jobOrderName;

  @NonNull
  public final TextView machineDesc;

  @NonNull
  public final TextView operation;

  @NonNull
  public final TextView remainingTime;

  private MachineWipListItemBinding(@NonNull CardView rootView, @NonNull TextView childParentDesc,
      @NonNull TextView jobOrderName, @NonNull TextView machineDesc, @NonNull TextView operation,
      @NonNull TextView remainingTime) {
    this.rootView = rootView;
    this.childParentDesc = childParentDesc;
    this.jobOrderName = jobOrderName;
    this.machineDesc = machineDesc;
    this.operation = operation;
    this.remainingTime = remainingTime;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static MachineWipListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MachineWipListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.machine_wip_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MachineWipListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.child_parent_desc;
      TextView childParentDesc = ViewBindings.findChildViewById(rootView, id);
      if (childParentDesc == null) {
        break missingId;
      }

      id = R.id.job_order_name;
      TextView jobOrderName = ViewBindings.findChildViewById(rootView, id);
      if (jobOrderName == null) {
        break missingId;
      }

      id = R.id.machine_desc;
      TextView machineDesc = ViewBindings.findChildViewById(rootView, id);
      if (machineDesc == null) {
        break missingId;
      }

      id = R.id.operation;
      TextView operation = ViewBindings.findChildViewById(rootView, id);
      if (operation == null) {
        break missingId;
      }

      id = R.id.remaining_time;
      TextView remainingTime = ViewBindings.findChildViewById(rootView, id);
      if (remainingTime == null) {
        break missingId;
      }

      return new MachineWipListItemBinding((CardView) rootView, childParentDesc, jobOrderName,
          machineDesc, operation, remainingTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
