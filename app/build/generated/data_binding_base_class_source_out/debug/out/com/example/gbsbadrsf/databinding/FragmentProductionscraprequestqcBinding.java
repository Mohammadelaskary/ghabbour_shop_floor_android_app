// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentProductionscraprequestqcBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton acceptBtn;

  @NonNull
  public final TextView childesc;

  @NonNull
  public final MaterialButton declineBtn;

  @NonNull
  public final DisplayDefectsBottomSheetBinding defectsListBottomSheet;

  @NonNull
  public final MaterialButton displayDefectBtn;

  @NonNull
  public final JobOrderDataBinding jobOrderData;

  @NonNull
  public final TextInputLayout notes;

  @NonNull
  public final TextView qualityscrapTxt;

  @NonNull
  public final TextView reason;

  @NonNull
  public final TextView reasonTxt;

  @NonNull
  public final RejectedLayoutDataBinding rejectedQtyData;

  @NonNull
  public final TextView responsibledepTxt;

  @NonNull
  public final TextView responspileDep;

  private FragmentProductionscraprequestqcBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton acceptBtn, @NonNull TextView childesc,
      @NonNull MaterialButton declineBtn,
      @NonNull DisplayDefectsBottomSheetBinding defectsListBottomSheet,
      @NonNull MaterialButton displayDefectBtn, @NonNull JobOrderDataBinding jobOrderData,
      @NonNull TextInputLayout notes, @NonNull TextView qualityscrapTxt, @NonNull TextView reason,
      @NonNull TextView reasonTxt, @NonNull RejectedLayoutDataBinding rejectedQtyData,
      @NonNull TextView responsibledepTxt, @NonNull TextView responspileDep) {
    this.rootView = rootView;
    this.acceptBtn = acceptBtn;
    this.childesc = childesc;
    this.declineBtn = declineBtn;
    this.defectsListBottomSheet = defectsListBottomSheet;
    this.displayDefectBtn = displayDefectBtn;
    this.jobOrderData = jobOrderData;
    this.notes = notes;
    this.qualityscrapTxt = qualityscrapTxt;
    this.reason = reason;
    this.reasonTxt = reasonTxt;
    this.rejectedQtyData = rejectedQtyData;
    this.responsibledepTxt = responsibledepTxt;
    this.responspileDep = responspileDep;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProductionscraprequestqcBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProductionscraprequestqcBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_productionscraprequestqc, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProductionscraprequestqcBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.accept_btn;
      MaterialButton acceptBtn = ViewBindings.findChildViewById(rootView, id);
      if (acceptBtn == null) {
        break missingId;
      }

      id = R.id.childesc;
      TextView childesc = ViewBindings.findChildViewById(rootView, id);
      if (childesc == null) {
        break missingId;
      }

      id = R.id.decline_btn;
      MaterialButton declineBtn = ViewBindings.findChildViewById(rootView, id);
      if (declineBtn == null) {
        break missingId;
      }

      id = R.id.defects_list_bottom_sheet;
      View defectsListBottomSheet = ViewBindings.findChildViewById(rootView, id);
      if (defectsListBottomSheet == null) {
        break missingId;
      }
      DisplayDefectsBottomSheetBinding binding_defectsListBottomSheet = DisplayDefectsBottomSheetBinding.bind(defectsListBottomSheet);

      id = R.id.display_defect_btn;
      MaterialButton displayDefectBtn = ViewBindings.findChildViewById(rootView, id);
      if (displayDefectBtn == null) {
        break missingId;
      }

      id = R.id.job_order_data;
      View jobOrderData = ViewBindings.findChildViewById(rootView, id);
      if (jobOrderData == null) {
        break missingId;
      }
      JobOrderDataBinding binding_jobOrderData = JobOrderDataBinding.bind(jobOrderData);

      id = R.id.notes;
      TextInputLayout notes = ViewBindings.findChildViewById(rootView, id);
      if (notes == null) {
        break missingId;
      }

      id = R.id.qualityscrap_txt;
      TextView qualityscrapTxt = ViewBindings.findChildViewById(rootView, id);
      if (qualityscrapTxt == null) {
        break missingId;
      }

      id = R.id.reason;
      TextView reason = ViewBindings.findChildViewById(rootView, id);
      if (reason == null) {
        break missingId;
      }

      id = R.id.reason_txt;
      TextView reasonTxt = ViewBindings.findChildViewById(rootView, id);
      if (reasonTxt == null) {
        break missingId;
      }

      id = R.id.rejected_qty_data;
      View rejectedQtyData = ViewBindings.findChildViewById(rootView, id);
      if (rejectedQtyData == null) {
        break missingId;
      }
      RejectedLayoutDataBinding binding_rejectedQtyData = RejectedLayoutDataBinding.bind(rejectedQtyData);

      id = R.id.responsibledep_txt;
      TextView responsibledepTxt = ViewBindings.findChildViewById(rootView, id);
      if (responsibledepTxt == null) {
        break missingId;
      }

      id = R.id.responspile_dep;
      TextView responspileDep = ViewBindings.findChildViewById(rootView, id);
      if (responspileDep == null) {
        break missingId;
      }

      return new FragmentProductionscraprequestqcBinding((CoordinatorLayout) rootView, acceptBtn,
          childesc, declineBtn, binding_defectsListBottomSheet, displayDefectBtn,
          binding_jobOrderData, notes, qualityscrapTxt, reason, reasonTxt, binding_rejectedQtyData,
          responsibledepTxt, responspileDep);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
