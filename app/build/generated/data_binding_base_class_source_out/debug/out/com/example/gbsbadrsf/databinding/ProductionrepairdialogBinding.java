// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ProductionrepairdialogBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView childTxt;

  @NonNull
  public final TextView childdesc;

  @NonNull
  public final MaterialButton closeBtn;

  @NonNull
  public final TextView defectname;

  @NonNull
  public final TextView defectnameTxt;

  @NonNull
  public final TextView defectqty;

  @NonNull
  public final TextView defectqtyTxt;

  @NonNull
  public final EditText notesEdt;

  @NonNull
  public final TextView notesTxt;

  @NonNull
  public final EditText requiredqtnEdt;

  @NonNull
  public final TextView requiredqtnTxt;

  @NonNull
  public final MaterialButton saveBtn;

  private ProductionrepairdialogBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView childTxt, @NonNull TextView childdesc, @NonNull MaterialButton closeBtn,
      @NonNull TextView defectname, @NonNull TextView defectnameTxt, @NonNull TextView defectqty,
      @NonNull TextView defectqtyTxt, @NonNull EditText notesEdt, @NonNull TextView notesTxt,
      @NonNull EditText requiredqtnEdt, @NonNull TextView requiredqtnTxt,
      @NonNull MaterialButton saveBtn) {
    this.rootView = rootView;
    this.childTxt = childTxt;
    this.childdesc = childdesc;
    this.closeBtn = closeBtn;
    this.defectname = defectname;
    this.defectnameTxt = defectnameTxt;
    this.defectqty = defectqty;
    this.defectqtyTxt = defectqtyTxt;
    this.notesEdt = notesEdt;
    this.notesTxt = notesTxt;
    this.requiredqtnEdt = requiredqtnEdt;
    this.requiredqtnTxt = requiredqtnTxt;
    this.saveBtn = saveBtn;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ProductionrepairdialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ProductionrepairdialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.productionrepairdialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ProductionrepairdialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.child_txt;
      TextView childTxt = ViewBindings.findChildViewById(rootView, id);
      if (childTxt == null) {
        break missingId;
      }

      id = R.id.childdesc;
      TextView childdesc = ViewBindings.findChildViewById(rootView, id);
      if (childdesc == null) {
        break missingId;
      }

      id = R.id.close_btn;
      MaterialButton closeBtn = ViewBindings.findChildViewById(rootView, id);
      if (closeBtn == null) {
        break missingId;
      }

      id = R.id.defectname;
      TextView defectname = ViewBindings.findChildViewById(rootView, id);
      if (defectname == null) {
        break missingId;
      }

      id = R.id.defectname_txt;
      TextView defectnameTxt = ViewBindings.findChildViewById(rootView, id);
      if (defectnameTxt == null) {
        break missingId;
      }

      id = R.id.defectqty;
      TextView defectqty = ViewBindings.findChildViewById(rootView, id);
      if (defectqty == null) {
        break missingId;
      }

      id = R.id.defectqty_txt;
      TextView defectqtyTxt = ViewBindings.findChildViewById(rootView, id);
      if (defectqtyTxt == null) {
        break missingId;
      }

      id = R.id.notes_edt;
      EditText notesEdt = ViewBindings.findChildViewById(rootView, id);
      if (notesEdt == null) {
        break missingId;
      }

      id = R.id.notes_txt;
      TextView notesTxt = ViewBindings.findChildViewById(rootView, id);
      if (notesTxt == null) {
        break missingId;
      }

      id = R.id.requiredqtn_edt;
      EditText requiredqtnEdt = ViewBindings.findChildViewById(rootView, id);
      if (requiredqtnEdt == null) {
        break missingId;
      }

      id = R.id.requiredqtn_txt;
      TextView requiredqtnTxt = ViewBindings.findChildViewById(rootView, id);
      if (requiredqtnTxt == null) {
        break missingId;
      }

      id = R.id.save_btn;
      MaterialButton saveBtn = ViewBindings.findChildViewById(rootView, id);
      if (saveBtn == null) {
        break missingId;
      }

      return new ProductionrepairdialogBinding((ConstraintLayout) rootView, childTxt, childdesc,
          closeBtn, defectname, defectnameTxt, defectqty, defectqtyTxt, notesEdt, notesTxt,
          requiredqtnEdt, requiredqtnTxt, saveBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
