// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RepairDefectItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView defectName;

  @NonNull
  public final TextView pendingQcApproveQty;

  @NonNull
  public final TextView pendingRepairQty;

  @NonNull
  public final TextView qualityApprovedQty;

  private RepairDefectItemBinding(@NonNull CardView rootView, @NonNull TextView defectName,
      @NonNull TextView pendingQcApproveQty, @NonNull TextView pendingRepairQty,
      @NonNull TextView qualityApprovedQty) {
    this.rootView = rootView;
    this.defectName = defectName;
    this.pendingQcApproveQty = pendingQcApproveQty;
    this.pendingRepairQty = pendingRepairQty;
    this.qualityApprovedQty = qualityApprovedQty;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static RepairDefectItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RepairDefectItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.repair_defect_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RepairDefectItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.defect_name;
      TextView defectName = ViewBindings.findChildViewById(rootView, id);
      if (defectName == null) {
        break missingId;
      }

      id = R.id.pending_qc_approve_qty;
      TextView pendingQcApproveQty = ViewBindings.findChildViewById(rootView, id);
      if (pendingQcApproveQty == null) {
        break missingId;
      }

      id = R.id.pending_repair_qty;
      TextView pendingRepairQty = ViewBindings.findChildViewById(rootView, id);
      if (pendingRepairQty == null) {
        break missingId;
      }

      id = R.id.quality_approved_qty;
      TextView qualityApprovedQty = ViewBindings.findChildViewById(rootView, id);
      if (qualityApprovedQty == null) {
        break missingId;
      }

      return new RepairDefectItemBinding((CardView) rootView, defectName, pendingQcApproveQty,
          pendingRepairQty, qualityApprovedQty);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
