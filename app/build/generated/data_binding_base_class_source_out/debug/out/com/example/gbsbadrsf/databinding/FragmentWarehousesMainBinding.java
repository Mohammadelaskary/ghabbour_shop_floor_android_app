// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentWarehousesMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton closeManufacturingRejectionRequest;

  @NonNull
  public final MaterialButton closePaintRejectionRequest;

  @NonNull
  public final MaterialButton closeWeldingRejectionRequest;

  @NonNull
  public final MaterialButton warehouserecivingBtn;

  private FragmentWarehousesMainBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton closeManufacturingRejectionRequest,
      @NonNull MaterialButton closePaintRejectionRequest,
      @NonNull MaterialButton closeWeldingRejectionRequest,
      @NonNull MaterialButton warehouserecivingBtn) {
    this.rootView = rootView;
    this.closeManufacturingRejectionRequest = closeManufacturingRejectionRequest;
    this.closePaintRejectionRequest = closePaintRejectionRequest;
    this.closeWeldingRejectionRequest = closeWeldingRejectionRequest;
    this.warehouserecivingBtn = warehouserecivingBtn;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentWarehousesMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentWarehousesMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_warehouses_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentWarehousesMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.close_manufacturing_rejection_request;
      MaterialButton closeManufacturingRejectionRequest = ViewBindings.findChildViewById(rootView, id);
      if (closeManufacturingRejectionRequest == null) {
        break missingId;
      }

      id = R.id.close_paint_rejection_request;
      MaterialButton closePaintRejectionRequest = ViewBindings.findChildViewById(rootView, id);
      if (closePaintRejectionRequest == null) {
        break missingId;
      }

      id = R.id.close_welding_rejection_request;
      MaterialButton closeWeldingRejectionRequest = ViewBindings.findChildViewById(rootView, id);
      if (closeWeldingRejectionRequest == null) {
        break missingId;
      }

      id = R.id.warehousereciving_btn;
      MaterialButton warehouserecivingBtn = ViewBindings.findChildViewById(rootView, id);
      if (warehouserecivingBtn == null) {
        break missingId;
      }

      return new FragmentWarehousesMainBinding((ConstraintLayout) rootView,
          closeManufacturingRejectionRequest, closePaintRejectionRequest,
          closeWeldingRejectionRequest, warehouserecivingBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
