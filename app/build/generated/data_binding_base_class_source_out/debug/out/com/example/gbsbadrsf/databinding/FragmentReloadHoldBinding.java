// Generated by view binder compiler. Do not edit!
package com.example.gbsbadrsf.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.gbsbadrsf.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentReloadHoldBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView Joborderqtn;

  @NonNull
  public final RecyclerView basketCodes;

  @NonNull
  public final TextInputLayout basketcodeEdt;

  @NonNull
  public final TextView childesc;

  @NonNull
  public final ConstraintLayout dataLayout;

  @NonNull
  public final TextInputLayout diecodeEdt;

  @NonNull
  public final ConstraintLayout jobOrderData;

  @NonNull
  public final TextView jobordernum;

  @NonNull
  public final TextView jobordernumTxt;

  @NonNull
  public final TextView loadingQty;

  @NonNull
  public final TextView loadingQtyTitle;

  @NonNull
  public final TextInputLayout machinecodeEdt;

  @NonNull
  public final TextInputEditText machinecodeNewedttxt;

  @NonNull
  public final TextView machineloadingTxt;

  @NonNull
  public final TextInputEditText newdiecodeEdt;

  @NonNull
  public final TextView operation;

  @NonNull
  public final ConstraintLayout qtyData;

  @NonNull
  public final MaterialButton saveBtn;

  private FragmentReloadHoldBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView Joborderqtn, @NonNull RecyclerView basketCodes,
      @NonNull TextInputLayout basketcodeEdt, @NonNull TextView childesc,
      @NonNull ConstraintLayout dataLayout, @NonNull TextInputLayout diecodeEdt,
      @NonNull ConstraintLayout jobOrderData, @NonNull TextView jobordernum,
      @NonNull TextView jobordernumTxt, @NonNull TextView loadingQty,
      @NonNull TextView loadingQtyTitle, @NonNull TextInputLayout machinecodeEdt,
      @NonNull TextInputEditText machinecodeNewedttxt, @NonNull TextView machineloadingTxt,
      @NonNull TextInputEditText newdiecodeEdt, @NonNull TextView operation,
      @NonNull ConstraintLayout qtyData, @NonNull MaterialButton saveBtn) {
    this.rootView = rootView;
    this.Joborderqtn = Joborderqtn;
    this.basketCodes = basketCodes;
    this.basketcodeEdt = basketcodeEdt;
    this.childesc = childesc;
    this.dataLayout = dataLayout;
    this.diecodeEdt = diecodeEdt;
    this.jobOrderData = jobOrderData;
    this.jobordernum = jobordernum;
    this.jobordernumTxt = jobordernumTxt;
    this.loadingQty = loadingQty;
    this.loadingQtyTitle = loadingQtyTitle;
    this.machinecodeEdt = machinecodeEdt;
    this.machinecodeNewedttxt = machinecodeNewedttxt;
    this.machineloadingTxt = machineloadingTxt;
    this.newdiecodeEdt = newdiecodeEdt;
    this.operation = operation;
    this.qtyData = qtyData;
    this.saveBtn = saveBtn;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentReloadHoldBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentReloadHoldBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_reload_hold, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentReloadHoldBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Joborderqtn;
      TextView Joborderqtn = ViewBindings.findChildViewById(rootView, id);
      if (Joborderqtn == null) {
        break missingId;
      }

      id = R.id.basket_codes;
      RecyclerView basketCodes = ViewBindings.findChildViewById(rootView, id);
      if (basketCodes == null) {
        break missingId;
      }

      id = R.id.basketcode_edt;
      TextInputLayout basketcodeEdt = ViewBindings.findChildViewById(rootView, id);
      if (basketcodeEdt == null) {
        break missingId;
      }

      id = R.id.childesc;
      TextView childesc = ViewBindings.findChildViewById(rootView, id);
      if (childesc == null) {
        break missingId;
      }

      id = R.id.data_layout;
      ConstraintLayout dataLayout = ViewBindings.findChildViewById(rootView, id);
      if (dataLayout == null) {
        break missingId;
      }

      id = R.id.diecode_edt;
      TextInputLayout diecodeEdt = ViewBindings.findChildViewById(rootView, id);
      if (diecodeEdt == null) {
        break missingId;
      }

      id = R.id.job_order_data;
      ConstraintLayout jobOrderData = ViewBindings.findChildViewById(rootView, id);
      if (jobOrderData == null) {
        break missingId;
      }

      id = R.id.jobordernum;
      TextView jobordernum = ViewBindings.findChildViewById(rootView, id);
      if (jobordernum == null) {
        break missingId;
      }

      id = R.id.jobordernum_txt;
      TextView jobordernumTxt = ViewBindings.findChildViewById(rootView, id);
      if (jobordernumTxt == null) {
        break missingId;
      }

      id = R.id.loading_qty;
      TextView loadingQty = ViewBindings.findChildViewById(rootView, id);
      if (loadingQty == null) {
        break missingId;
      }

      id = R.id.loading_qty_title;
      TextView loadingQtyTitle = ViewBindings.findChildViewById(rootView, id);
      if (loadingQtyTitle == null) {
        break missingId;
      }

      id = R.id.machinecode_edt;
      TextInputLayout machinecodeEdt = ViewBindings.findChildViewById(rootView, id);
      if (machinecodeEdt == null) {
        break missingId;
      }

      id = R.id.machinecode_newedttxt;
      TextInputEditText machinecodeNewedttxt = ViewBindings.findChildViewById(rootView, id);
      if (machinecodeNewedttxt == null) {
        break missingId;
      }

      id = R.id.machineloading_txt;
      TextView machineloadingTxt = ViewBindings.findChildViewById(rootView, id);
      if (machineloadingTxt == null) {
        break missingId;
      }

      id = R.id.newdiecode_edt;
      TextInputEditText newdiecodeEdt = ViewBindings.findChildViewById(rootView, id);
      if (newdiecodeEdt == null) {
        break missingId;
      }

      id = R.id.operation;
      TextView operation = ViewBindings.findChildViewById(rootView, id);
      if (operation == null) {
        break missingId;
      }

      id = R.id.qty_data;
      ConstraintLayout qtyData = ViewBindings.findChildViewById(rootView, id);
      if (qtyData == null) {
        break missingId;
      }

      id = R.id.save_btn;
      MaterialButton saveBtn = ViewBindings.findChildViewById(rootView, id);
      if (saveBtn == null) {
        break missingId;
      }

      return new FragmentReloadHoldBinding((ConstraintLayout) rootView, Joborderqtn, basketCodes,
          basketcodeEdt, childesc, dataLayout, diecodeEdt, jobOrderData, jobordernum,
          jobordernumTxt, loadingQty, loadingQtyTitle, machinecodeEdt, machinecodeNewedttxt,
          machineloadingTxt, newdiecodeEdt, operation, qtyData, saveBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
